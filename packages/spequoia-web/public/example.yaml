version: 1.0.0-it1
title: TodoMVC
description: |
  # TodoMVC

  This document is an example **Spequoia** specification for a TODO app.

  It's based on the [TodoMVC](https://todomvc.com/) project, which provides a
  consistent way to implement a simple TODO app using various JavaScript frameworks.

  The goal of this document is to show how to use **Spequoia** to specify the
  behavior of a web application. It includes the following sections:
  - **Views**: The user interface of the application, including the layout and
      elements used.
  - **Features**: The features of the application.
  - **Examples**: The examples of the features, including the expected
      behavior and the steps to reproduce it.

  These sections are used to generate wireframes, test cases, and documentation.

executors:
  default:
    kind: spequoia-playwright
    description: |
      This executor uses Playwright to run the tests. It uses the Playwright
      API to interact with the web application and verify the expected behavior.
    configuration:
      baseUrl: "https://https://todomvc.com/examples/javascript-es5/dist/"

defaultExecutor: default

views:
  main page:
    header:
      title:
        $selector: h1
        $text: todos
      input: input.new-todo
    todo list:
      $selector: .todo-list
      task row (n):
        $selector: '[data-id="${n}"]'
        $direction: row
        done checkbox: input[type="checkbox"]
        label: label
        delete button: button.destroy
    footer:
      $selector: .footer
      $direction: row
      todo count:
        $selector: .todo-count
        $text: 0 items left
      filters:
        $selector: .filters
        $direction: row
        all filter:
          $selector: a[href="#/"]
          $text: All
        active filter:
          $selector: a[href="#/active"]
          $text: Active
        completed filter:
          $selector: a[href="#/completed"]
          $text: Completed
      clear completed button:
        $selector: .clear-completed
        $text: Clear completed

features:
  - name: Initial state of the app
    description: |
      The web app title "*todos*" is displayed in the header. It's shown in the header element
      in a `h1` tag.
      The app starts with an empty task list, and the user is prompted to add tasks.
    tags: [ui, layout]
    examples:
      - id: EX-001
        name: The web app shows a header with the app title "todos", a text input, and an empty task list
        description: |
          The app title is prominently displayed in the header, making the purpose
          of the application immediately clear to users.

          The input field is always visible, allowing users to quickly add tasks. The input placeholder
          is "What needs to be done?" to guide users on what to enter.

          The task list is empty at the start, indicating that no tasks have been added yet.
        steps:
          - visit main page
          - expect title to have text "todos"
          - expect input to be visible
          - expect input to have placeholder "What needs to be done?"
          - expect todo list to be empty
          - expect footer not to be visible

  - name: Create new tasks
    description: |
      The text input allows to add new tasks by typing the task name and hitting `Enter`.

      Newly created tasks are displayed in the task list as active.

    examples:
      - id: EX-002
        name: Create a new task
        steps:
          - visit main page
          - expect todo list to be empty
          - expect footer not to be visible
          - click input
          - type "New task"
          - press key "Enter"
          - expect input to have text ""
          - expect task row (1) to be visible
          - expect label to have text "New task"
          - expect done checkbox to be visible
          - expect footer to be visible
          - expect todo count to have text "1 items left"
          - expect clear completed button to be hidden

  - name: Mark tasks as done
    description: |
      The user can mark tasks as done by clicking the checkbox next to the task name.

      When a task is marked as done, it is visually indicated as completed and removed from the active
      task count.

      The user can also uncheck the checkbox to mark the task as not done again.

    examples:
      - id: EX-003
        name: Mark a task as done
        steps:
          - visit main page
          - click input
          - type "New task"
          - press key "Enter"
          - expect task row (1) to be visible
          - expect label to have text "New task"
          - expect todo count to have text "1 items left"
          - click done checkbox
          - expect done checkbox to be checked
          - expect todo count to have text "0 items left"
          - expect clear completed button to be visible
      - id: EX-004
        name: Unmark a task as done
        steps:
          - visit main page
          - click input
          - type "New task"
          - press key "Enter"
          - expect task row (1) to be visible
          - expect label to have text "New task"
          - expect todo count to have text "1 items left"
          - click done checkbox
          - expect done checkbox to be checked
          - expect todo count to have text "0 items left"
          - click done checkbox
          - expect done checkbox not to be checked
          - expect todo count to have text "1 items left"

  - name: Clear completed tasks
    description: |
      The user can clear completed tasks by clicking the "Clear completed" button.

      When the button is clicked, all completed tasks are removed from the task list.

      The button is only visible when there are completed tasks.

    examples:
      - id: EX-005
        name: Clear completed tasks
        steps:
          - visit main page
          - click input
          - type "New task"
          - press key "Enter"
          - expect input to have text ""
          - expect task row (1) to be visible
          - expect label to have text "New task"
          - expect todo count to have text "1 items left"
          - click done checkbox
          - expect done checkbox to be checked
          - expect todo count to have text "0 items left"
          - expect clear completed button to be visible
          - click clear completed button
          - expect todo list to be empty
          - expect footer not to be visible

  - name: Delete tasks
    description: |
      The user can delete tasks by clicking the "Delete" button next to the task name.

      When the button is clicked, the task is removed from the task list.

      The button is only visible when the task is hovered.

    examples:
      - id: EX-006
        name: Delete a task
        steps:
          - visit main page
          - expect todo list to be empty
          - expect footer not to be visible
          - click input
          - type "New task"
          - press key "Enter"
          - expect input to have text ""
          - expect task row (1) to be visible
          - expect label to have text "New task"
          - expect done checkbox to be visible
          - hover over task row (1)
          - expect delete button to be visible
          - click delete button
          - expect todo list to be empty

  - name: Filter tasks
    description: |
      The user can filter tasks by clicking the "All", "Active", or "Completed" links in the footer.

      When a link is clicked, only the tasks that match the filter are displayed in the task list.

      The active filter is visually indicated by a different style.

    examples:
      - id: EX-007
        name: Filter tasks
        steps:
          - visit main page
          - expect todo list to be empty
          - click input
          - type "Active task"
          - press key "Enter"
          - expect task row (1) to be visible
          - expect task row (1) label to have text "Active task"
          - type "Completed task"
          - press key "Enter"
          - expect task row (2) to be visible
          - expect task row (2) label to have text "Completed task"
          - click task row (2) done checkbox
          - expect input to have text ""
          - click active filter
          - expect task row (1) to be visible
          - expect task row (2) to be hidden
          - click completed filter
          - expect task row (1) to be hidden
          - expect task row (2) to be visible
          - click all filter
          - expect task row (1) to be visible
          - expect task row (2) to be visible
